{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\Downloads\\\\fake-news-detection\\\\frontend\\\\src\\\\components\\\\NewsVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewsVisualization = ({\n  result,\n  probability\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(400, 400);\n    renderer.setClearColor(0x000000, 0);\n    mountRef.current.innerHTML = '';\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create torus knot\n    const geometry = new THREE.TorusKnotGeometry(1, 0.3, 100, 16);\n    const material = new THREE.MeshPhongMaterial({\n      color: result === 'Fake' ? '#ff4444' : '#44ff44',\n      metalness: 0.9,\n      roughness: 0.1,\n      transparent: true,\n      opacity: 0.9,\n      wireframe: true\n    });\n    const torusKnot = new THREE.Mesh(geometry, material);\n    scene.add(torusKnot);\n\n    // Add lights\n    const light1 = new THREE.PointLight(0xffffff, 1);\n    light1.position.set(2, 2, 2);\n    scene.add(light1);\n    const light2 = new THREE.DirectionalLight(0x404040, 2);\n    light2.position.set(-2, 2, -2);\n    scene.add(light2);\n    camera.position.z = 3;\n\n    // Animation\n    const animate = () => {\n      requestAnimationFrame(animate);\n      torusKnot.rotation.x += 0.01;\n      torusKnot.rotation.y += 0.01;\n\n      // Pulse effect based on probability\n      const scale = 1 + Math.sin(Date.now() * 0.002) * 0.1;\n      torusKnot.scale.set(scale, scale, scale);\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      var _mountRef$current;\n      (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.removeChild(renderer.domElement);\n    };\n  }, [result, probability]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: \"visualization\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n};\n_s(NewsVisualization, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = NewsVisualization;\nexport default NewsVisualization;\nvar _c;\n$RefreshReg$(_c, \"NewsVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","NewsVisualization","result","probability","_s","mountRef","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","alpha","setSize","setClearColor","current","innerHTML","appendChild","domElement","geometry","TorusKnotGeometry","material","MeshPhongMaterial","color","metalness","roughness","transparent","opacity","wireframe","torusKnot","Mesh","add","light1","PointLight","position","set","light2","DirectionalLight","z","animate","requestAnimationFrame","rotation","x","y","scale","Math","sin","Date","now","render","_mountRef$current","removeChild","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shiva/Downloads/fake-news-detection/frontend/src/components/NewsVisualization.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst NewsVisualization = ({ result, probability }) => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    \r\n    renderer.setSize(400, 400);\r\n    renderer.setClearColor(0x000000, 0);\r\n    mountRef.current.innerHTML = '';\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // Create torus knot\r\n    const geometry = new THREE.TorusKnotGeometry(1, 0.3, 100, 16);\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: result === 'Fake' ? '#ff4444' : '#44ff44',\r\n      metalness: 0.9,\r\n      roughness: 0.1,\r\n      transparent: true,\r\n      opacity: 0.9,\r\n      wireframe: true\r\n    });\r\n    const torusKnot = new THREE.Mesh(geometry, material);\r\n    scene.add(torusKnot);\r\n\r\n    // Add lights\r\n    const light1 = new THREE.PointLight(0xffffff, 1);\r\n    light1.position.set(2, 2, 2);\r\n    scene.add(light1);\r\n\r\n    const light2 = new THREE.DirectionalLight(0x404040, 2);\r\n    light2.position.set(-2, 2, -2);\r\n    scene.add(light2);\r\n\r\n    camera.position.z = 3;\r\n\r\n    // Animation\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      torusKnot.rotation.x += 0.01;\r\n      torusKnot.rotation.y += 0.01;\r\n      \r\n      // Pulse effect based on probability\r\n      const scale = 1 + Math.sin(Date.now() * 0.002) * 0.1;\r\n      torusKnot.scale.set(scale, scale, scale);\r\n      \r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      mountRef.current?.removeChild(renderer.domElement);\r\n    };\r\n  }, [result, probability]);\r\n\r\n  return <div ref={mountRef} className=\"visualization\" />;\r\n};\r\n\r\nexport default NewsVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}